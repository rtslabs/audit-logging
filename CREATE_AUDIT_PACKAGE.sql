CREATE TABLE TIGER.AUDIT_MASTER 
(
  AUDIT_ID NUMBER NOT NULL, 
  AUDIT_DATE DATE DEFAULT SYSDATE NOT NULL, 
  AUDIT_USER VARCHAR2(20) DEFAULT 'AUDIT' NOT NULL, 
  AUDIT_TBL_NM VARCHAR2(50) NOT NULL, 
  AUDIT_TBL_ID VARCHAR2(50) NOT NULL, 
  AUDIT_TYPE CHAR(1) NOT NULL, 
  CONSTRAINT AUDIT_MASTER_PK PRIMARY KEY ( AUDIT_ID ) ENABLE 
);

COMMENT ON COLUMN TIGER.AUDIT_MASTER.AUDIT_TYPE IS 'Values can be U or D';

CREATE TABLE TIGER.AUDIT_DETAIL 
(
  AUDIT_ID NUMBER NOT NULL, 
  AUDIT_FLD_NM VARCHAR2(30) NOT NULL, 
  AUDIT_FLD_TYPE VARCHAR2(20) DEFAULT 'AUDIT' NOT NULL, 
  AUDIT_FLD_OLD_VAL VARCHAR2(255), 
  AUDIT_FLD_NEW_VAL VARCHAR2(255)
);

ALTER TABLE TIGER.AUDIT_DETAIL ADD FOREIGN KEY (AUDIT_ID) REFERENCES AUDIT_MASTER(AUDIT_ID) ON DELETE CASCADE;

CREATE SEQUENCE TIGER.SEQ_AUDIT_MASTER  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 50 NOORDER  NOCYCLE ;  
/

CREATE OR REPLACE PACKAGE TIGER.AUDIT_PKG
AS
	PROCEDURE CREATE_AUDIT_MASTER_RECORD(TBL_NM IN VARCHAR2, TBL_ID IN NUMBER, CHG_TYPE IN CHAR);
    PROCEDURE CHECK_AND_AUDIT(FLD_NM IN VARCHAR2, FLD_TYPE IN VARCHAR2, FLD_NEW_VAL IN VARCHAR2, FLD_OLD_VAL IN VARCHAR2 );
    PROCEDURE CHECK_AND_AUDIT(FLD_NM IN VARCHAR2, FLD_TYPE IN VARCHAR2, FLD_NEW_VAL IN DATE, FLD_OLD_VAL IN DATE );
    PROCEDURE CHECK_AND_AUDIT(FLD_NM IN VARCHAR2, FLD_TYPE IN VARCHAR2, FLD_NEW_VAL IN TIMESTAMP, FLD_OLD_VAL IN TIMESTAMP );
    PROCEDURE CHECK_AND_AUDIT(FLD_NM IN VARCHAR2, FLD_TYPE IN VARCHAR2, FLD_NEW_VAL IN NUMBER, FLD_OLD_VAL IN NUMBER );
END;
/

CREATE OR REPLACE PACKAGE BODY TIGER.AUDIT_PKG
AS
	PROCEDURE CREATE_AUDIT_MASTER_RECORD(TBL_NM IN VARCHAR2, TBL_ID IN NUMBER, CHG_TYPE IN CHAR)
	IS
	BEGIN
		INSERT INTO TIGER.AUDIT_MASTER (AUDIT_ID, AUDIT_DATE, AUDIT_USER, AUDIT_TBL_NM, AUDIT_TBL_ID, AUDIT_TYPE) 
			VALUES (TIGER.SEQ_AUDIT_MASTER.nextval, SYSDATE, USER, TBL_NM, TBL_ID, CHG_TYPE);
	END;

	PROCEDURE CHECK_AND_AUDIT(FLD_NM IN VARCHAR2, FLD_TYPE IN VARCHAR2, FLD_NEW_VAL IN VARCHAR2, FLD_OLD_VAL IN VARCHAR2 )
	IS
	BEGIN
	    IF ( FLD_NEW_VAL <> FLD_OLD_VAL OR
	         (FLD_NEW_VAL IS NULL AND FLD_OLD_VAL IS NOT NULL) OR
	         (FLD_NEW_VAL IS NOT NULL AND FLD_OLD_VAL IS NULL) )
	    THEN
	    	INSERT INTO TIGER.AUDIT_DETAIL (AUDIT_ID, AUDIT_FLD_NM, AUDIT_FLD_TYPE, AUDIT_FLD_OLD_VAL, AUDIT_FLD_NEW_VAL)
				VALUES (TIGER.SEQ_AUDIT_MASTER.currval, UPPER(FLD_NM), UPPER(FLD_TYPE), FLD_OLD_VAL, FLD_NEW_VAL);
	    END IF;
	END;

	PROCEDURE CHECK_AND_AUDIT(FLD_NM IN VARCHAR2, FLD_TYPE IN VARCHAR2, FLD_NEW_VAL IN DATE, FLD_OLD_VAL IN DATE )
	IS
	BEGIN
	    IF ( FLD_NEW_VAL <> FLD_OLD_VAL OR
	         (FLD_NEW_VAL IS NULL AND FLD_OLD_VAL IS NOT NULL) OR
	         (FLD_NEW_VAL IS NOT NULL AND FLD_OLD_VAL IS NULL) )
	    THEN
	    	INSERT INTO TIGER.AUDIT_DETAIL (AUDIT_ID, AUDIT_FLD_NM, AUDIT_FLD_TYPE, AUDIT_FLD_OLD_VAL, AUDIT_FLD_NEW_VAL)
				VALUES (TIGER.SEQ_AUDIT_MASTER.currval, UPPER(FLD_NM), UPPER(FLD_TYPE), TO_CHAR( FLD_OLD_VAL, 'DD-MON-YYYY HH24:MI:SS' ), TO_CHAR( FLD_NEW_VAL, 'DD-MON-YYYY HH24:MI:SS' ));
	    END IF;
	END;

	PROCEDURE CHECK_AND_AUDIT(FLD_NM IN VARCHAR2, FLD_TYPE IN VARCHAR2, FLD_NEW_VAL IN TIMESTAMP, FLD_OLD_VAL IN TIMESTAMP )
	IS
	BEGIN
	    IF ( FLD_NEW_VAL <> FLD_OLD_VAL OR
	         (FLD_NEW_VAL IS NULL AND FLD_OLD_VAL IS NOT NULL) OR
	         (FLD_NEW_VAL IS NOT NULL AND FLD_OLD_VAL IS NULL) )
	    THEN
	    	INSERT INTO TIGER.AUDIT_DETAIL (AUDIT_ID, AUDIT_FLD_NM, AUDIT_FLD_TYPE, AUDIT_FLD_OLD_VAL, AUDIT_FLD_NEW_VAL)
				VALUES (TIGER.SEQ_AUDIT_MASTER.currval, UPPER(FLD_NM), UPPER(FLD_TYPE), TO_CHAR( FLD_OLD_VAL, 'DD-MON-YYYY HH24:MI:SS' ), TO_CHAR( FLD_NEW_VAL, 'DD-MON-YYYY HH24:MI:SS' ));
	    END IF;
	END;

	PROCEDURE CHECK_AND_AUDIT(FLD_NM IN VARCHAR2, FLD_TYPE IN VARCHAR2, FLD_NEW_VAL IN NUMBER, FLD_OLD_VAL IN NUMBER )
	IS
	BEGIN
	    IF ( FLD_NEW_VAL <> FLD_OLD_VAL OR
	         (FLD_NEW_VAL IS NULL AND FLD_OLD_VAL IS NOT NULL) OR
	         (FLD_NEW_VAL IS NOT NULL AND FLD_OLD_VAL IS NULL) )
	    THEN
	        INSERT INTO TIGER.AUDIT_DETAIL (AUDIT_ID, AUDIT_FLD_NM, AUDIT_FLD_TYPE, AUDIT_FLD_OLD_VAL, AUDIT_FLD_NEW_VAL)
				VALUES (TIGER.SEQ_AUDIT_MASTER.currval, UPPER(FLD_NM), UPPER(FLD_TYPE), FLD_OLD_VAL, FLD_NEW_VAL);
	    END IF;
	END;

END AUDIT_PKG;
/


